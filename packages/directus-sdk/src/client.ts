/**
 * This file is automatically generated by the `@indirectus/cli` package.
 * Follow the package's instruction to update this file with the latest schema.
 */

import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

type DirectusSDK = typeof DirectusSDK;

export namespace Types {
  // Internal
  export type Nullable<T> = T | null;
  export type Optional<T> = Nullable<T>;
  export type UnknownType<T> = T | unknown;
  export type PrimaryKey<T> = T;

  // Numbers
  export type BigInteger = number;
  export type Decimal = number;
  export type Float = number;
  export type Integer = number;
  export type Number = number;

  // Buffers
  export type Binary = string;
  export type String = string;
  export type Text = string;

  // Date & Time
  export type Date = string | globalThis.Date;
  export type DateTime = string | globalThis.Date;

  // Geometry
  export namespace Geometry {
    export type LineString = any;
    export type MultiLineString = any;
    export type MultiPoint = any;
    export type MultiPolygon = any;
    export type Point = any;
    export type Polygon = any;
  }

  // Complex
  export type JSON = any;
  export type JSONSchema = any;

  // Others
  export type UUID = string;
  export type Boolean = boolean;
  export type Enum = string;
}

/**
 * All collection types.
 */
export namespace Collections {
  /**
   * The resolved directus activity collection type.
   *
   */
  export type DirectusActivity = Directus.DirectusActivity<System>;

  /**
   * The resolved directus collections collection type.
   *
   */
  export type DirectusCollection = Directus.DirectusCollection<System>;

  /**
   * The resolved directus fields collection type.
   *
   */
  export type DirectusField = Directus.DirectusField<System>;

  /**
   * The resolved directus files collection type.
   *
   */
  export type DirectusFile = Directus.DirectusFile<System>;

  /**
   * The resolved directus folders collection type.
   *
   */
  export type DirectusFolder = Directus.DirectusFolder<System>;

  /**
   * The resolved directus permissions collection type.
   *
   */
  export type DirectusPermission = Directus.DirectusPermission<System>;

  /**
   * The resolved directus presets collection type.
   *
   */
  export type DirectusPreset = Directus.DirectusPreset<System>;

  /**
   * The resolved directus relations collection type.
   *
   */
  export type DirectusRelation = Directus.DirectusRelation<System>;

  /**
   * The resolved directus revisions collection type.
   *
   */
  export type DirectusRevision = Directus.DirectusRevision<System>;

  /**
   * The resolved directus roles collection type.
   *
   */
  export type DirectusRole = Directus.DirectusRole<System>;

  /**
   * The resolved directus settings collection type.
   *
   */
  export type DirectusSettings = Directus.DirectusSettings<System>;

  /**
   * The resolved directus users collection type.
   *
   */
  export type DirectusUser = Directus.DirectusUser<System>;

  /**
   * The resolved directus webhooks collection type.
   *
   */
  export type DirectusWebhook = Directus.DirectusWebhook<System>;

  /**
   * The resolved directus dashboards collection type.
   *
   */
  export type DirectusDashboard = Directus.DirectusDashboard<System>;

  /**
   * The resolved directus panels collection type.
   *
   */
  export type DirectusPanel = Directus.DirectusPanel<System>;

  /**
   * The resolved directus notifications collection type.
   *
   */
  export type DirectusNotification = Directus.DirectusNotification<System>;

  /**
   * The resolved directus shares collection type.
   *
   */
  export type DirectusShare = Directus.DirectusShare<System>;

  /**
   * The resolved directus flows collection type.
   *
   */
  export type DirectusFlow = Directus.DirectusFlow<System>;

  /**
   * The resolved directus operations collection type.
   *
   */
  export type DirectusOperation = Directus.DirectusOperation<System>;

  /**
   * The resolved directus translations collection type.
   *
   */
  export type DirectusTranslation = Directus.DirectusTranslation<System>;

  /**
   * The resolved directus versions collection type.
   *
   */
  export type DirectusVersion = Directus.DirectusVersion<System>;

  /**
   * The resolved directus extensions collection type.
   *
   */
  export type DirectusExtension = Directus.DirectusExtension<System>;

  /**
   * The attachment collection.
   */
  export interface Attachment {
    id: Types.PrimaryKey<Types.Integer>;
    user_created: Types.Optional<Types.String | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.String | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    type: Types.Optional<"vocal" | "file" | "video" | "image" | Types.String>;
    file: Types.Optional<Types.String | Collections.DirectusFile>;
    chat: Types.Optional<Types.Integer | Collections.Chat>;
  }

  /**
   * The chat collection.
   */
  export interface Chat {
    id: Types.PrimaryKey<Types.Integer>;
    user_created: Types.Optional<Types.String | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.String | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    conversation: Types.Optional<Types.Integer | Collections.Conversation>;
    read_by: Collections.ChatDirectusUsers[];
    text: Types.Optional<Types.String>;
    attachments: Collections.Attachment[];
  }

  /**
   * The chat directus users collection.
   */
  export interface ChatDirectusUsers {
    id: Types.PrimaryKey<Types.Integer>;
    chat_id: Types.Optional<Types.Integer | Collections.Chat>;
    directus_users_id: Types.Optional<Types.String | Collections.DirectusUser>;
  }

  /**
   * The conversation collection.
   */
  export interface Conversation {
    id: Types.PrimaryKey<Types.Integer>;
    status: "archived" | "draft" | "published" | Types.String;
    user_created: Types.Optional<Types.String | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.String | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    chats: Collections.Chat[];
    group: Types.Optional<Types.Boolean>;
    cover: Types.Optional<Types.String | Collections.DirectusFile>;
    group_name: Types.Optional<Types.String>;
    users: Collections.ConversationDirectusUsers[];
  }

  /**
   * The conversation directus users collection.
   */
  export interface ConversationDirectusUsers {
    id: Types.PrimaryKey<Types.Integer>;
    conversation_id: Types.Optional<Types.Integer | Collections.Conversation>;
    directus_users_id: Types.Optional<Types.String | Collections.DirectusUser>;
  }
}

/**
 * System schema extensions.
 */

export interface System {
  /**
   * The definition for the directus activity system collection.
   *
   */
  directus_activity: {}[];

  /**
   * The definition for the directus collections system collection.
   *
   */
  directus_collections: {}[];

  /**
   * The definition for the directus fields system collection.
   *
   */
  directus_fields: {}[];

  /**
   * The definition for the directus files system collection.
   *
   */
  directus_files: {}[];

  /**
   * The definition for the directus folders system collection.
   *
   */
  directus_folders: {}[];

  /**
   * The definition for the directus permissions system collection.
   *
   */
  directus_permissions: {}[];

  /**
   * The definition for the directus presets system collection.
   *
   */
  directus_presets: {}[];

  /**
   * The definition for the directus relations system collection.
   *
   */
  directus_relations: {}[];

  /**
   * The definition for the directus revisions system collection.
   *
   */
  directus_revisions: {}[];

  /**
   * The definition for the directus roles system collection.
   *
   */
  directus_roles: {}[];

  /**
   * The definition for the directus settings system collection.
   *
   */
  directus_settings: {};

  /**
   * The definition for the directus users system collection.
   *
   */
  directus_users: {
    conversations: Collections.ConversationDirectusUsers[];
    last_active: Types.Optional<Types.DateTime>;
  }[];

  /**
   * The definition for the directus webhooks system collection.
   *
   */
  directus_webhooks: {}[];

  /**
   * The definition for the directus dashboards system collection.
   *
   */
  directus_dashboards: {}[];

  /**
   * The definition for the directus panels system collection.
   *
   */
  directus_panels: {}[];

  /**
   * The definition for the directus notifications system collection.
   *
   */
  directus_notifications: {}[];

  /**
   * The definition for the directus shares system collection.
   *
   */
  directus_shares: {}[];

  /**
   * The definition for the directus flows system collection.
   *
   */
  directus_flows: {}[];

  /**
   * The definition for the directus operations system collection.
   *
   */
  directus_operations: {}[];

  /**
   * The definition for the directus translations system collection.
   *
   */
  directus_translations: {}[];

  /**
   * The definition for the directus versions system collection.
   *
   */
  directus_versions: {}[];

  /**
   * The definition for the directus extensions system collection.
   *
   */
  directus_extensions: {}[];
}

/**
 * Schema definition.
 */
export interface Schema extends System {
  /**
   * The attachment collection.
   */
  attachment: Collections.Attachment[];

  /**
   * The chat collection.
   */
  chat: Collections.Chat[];

  /**
   * The chat directus users collection.
   */
  chat_directus_users: Collections.ChatDirectusUsers[];

  /**
   * The conversation collection.
   */
  conversation: Collections.Conversation[];

  /**
   * The conversation directus users collection.
   */
  conversation_directus_users: Collections.ConversationDirectusUsers[];
}

export interface TypedCollectionItemsWrapper<Collection extends object> {
  /**
   * Creates many items in the collection.
   */
  create<const Query extends DirectusSDK.Query<Schema, Collection>>(
    items: Partial<Collection>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Read many items from the collection.
   */
  query<const Query extends DirectusSDK.Query<Schema, Collection>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Read the first item from the collection matching the query.
   */
  find<const Query extends DirectusSDK.Query<Schema, Collection>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Update many items in the collection.
   */
  update<const Query extends DirectusSDK.Query<Schema, Collection[]>>(
    keys: string[] | number[],
    patch: Partial<Collection>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Remove many items in the collection.
   */
  remove<const Query extends DirectusSDK.Query<Schema, Collection>>(
    keys: string[] | number[],
  ): Promise<void>;
}

export interface TypedCollectionItemWrapper<Collection extends object> {
  /**
   * Create a single item in the collection.
   */
  create<const Query extends DirectusSDK.Query<Schema, Collection>>(
    item: Partial<Collection>,
    query?: Query,
  ): Promise<DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>>;

  /**
   * Read a single item from the collection.
   */
  get<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Update a single item from the collection.
   */
  update<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
    patch: Partial<Collection>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Remove many items in the collection.
   */
  remove<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
  ): Promise<void>;
}

/**
 * Helper functions
 */

/**
 * Create many attachment items.
 */
export function createAttachmentItems<
  const Query extends Directus.Query<Schema, Collections.Attachment[]>,
>(items: Partial<Collections.Attachment>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "attachment", Query>(
    "attachment",
    items,
    query,
  );
}

/**
 * Create a single attachment item.
 */
export function createAttachmentItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Attachment[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Attachment>, query?: Query) {
  return DirectusSDK.createItem<Schema, "attachment", Query>(
    "attachment",
    item,
    query,
  );
}

/**
 * Read many attachment items.
 */
export function readAttachmentItems<
  const Query extends Directus.Query<Schema, Collections.Attachment>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "attachment", Query>(
    "attachment",
    query,
  );
}

/**
 * Read many attachment items.
 */
export const listAttachment = readAttachmentItems;

/**
 * Gets a single known attachment item by id.
 */
export function readAttachmentItem<
  const Query extends Directus.Query<Schema, Collections.Attachment>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "attachment", Query>(
    "attachment",
    key,
    query,
  );
}

/**
 * Gets a single known attachment item by id.
 */
export const readAttachment = readAttachmentItem;

/**
 * Read many attachment items.
 */
export function updateAttachmentItems<
  const Query extends Directus.Query<Schema, Collections.Attachment[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Attachment>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "attachment", Query>(
    "attachment",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known attachment item by id.
 */
export function updateAttachmentItem<
  const Query extends Directus.Query<Schema, Collections.Attachment[]>,
>(key: string | number, patch: Partial<Collections.Attachment>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "attachment", Query>(
    "attachment",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many attachment items.
 */
export function deleteAttachmentItems<
  const Query extends Directus.Query<Schema, Collections.Attachment[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "attachment", Query>(
    "attachment",
    keys,
  );
}

/**
 * Deletes a single known attachment item by id.
 */
export function deleteAttachmentItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "attachment">("attachment", key);
}

export class AttachmentItems
  implements TypedCollectionItemsWrapper<Collections.Attachment>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Attachment>,
  >(
    items: Partial<Collections.Attachment>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Attachment,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createAttachmentItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.Attachment>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Attachment,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readAttachmentItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.Attachment>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Attachment,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readAttachmentItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Attachment[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Attachment>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Attachment,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateAttachmentItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Attachment>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class AttachmentItem
  implements TypedCollectionItemWrapper<Collections.Attachment>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.Attachment>,
  >(
    item: Partial<Collections.Attachment>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Attachment,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createAttachmentItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Attachment>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Attachment,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readAttachmentItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Attachment>,
  >(
    key: string | number,
    patch: Partial<Collections.Attachment>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Attachment,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateAttachmentItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Attachment>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteAttachmentItem(key));
  }
}

/**
 * Create many chat items.
 */
export function createChatItems<
  const Query extends Directus.Query<Schema, Collections.Chat[]>,
>(items: Partial<Collections.Chat>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "chat", Query>("chat", items, query);
}

/**
 * Create a single chat item.
 */
export function createChatItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Chat[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Chat>, query?: Query) {
  return DirectusSDK.createItem<Schema, "chat", Query>("chat", item, query);
}

/**
 * Read many chat items.
 */
export function readChatItems<
  const Query extends Directus.Query<Schema, Collections.Chat>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "chat", Query>("chat", query);
}

/**
 * Read many chat items.
 */
export const listChat = readChatItems;

/**
 * Gets a single known chat item by id.
 */
export function readChatItem<
  const Query extends Directus.Query<Schema, Collections.Chat>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "chat", Query>("chat", key, query);
}

/**
 * Gets a single known chat item by id.
 */
export const readChat = readChatItem;

/**
 * Read many chat items.
 */
export function updateChatItems<
  const Query extends Directus.Query<Schema, Collections.Chat[]>,
>(keys: string[] | number[], patch: Partial<Collections.Chat>, query?: Query) {
  return DirectusSDK.updateItems<Schema, "chat", Query>(
    "chat",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known chat item by id.
 */
export function updateChatItem<
  const Query extends Directus.Query<Schema, Collections.Chat[]>,
>(key: string | number, patch: Partial<Collections.Chat>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "chat", Query>(
    "chat",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many chat items.
 */
export function deleteChatItems<
  const Query extends Directus.Query<Schema, Collections.Chat[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "chat", Query>("chat", keys);
}

/**
 * Deletes a single known chat item by id.
 */
export function deleteChatItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "chat">("chat", key);
}

export class ChatItems
  implements TypedCollectionItemsWrapper<Collections.Chat>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<const Query extends DirectusSDK.Query<Schema, Collections.Chat>>(
    items: Partial<Collections.Chat>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Chat, Query["fields"]>[]
  > {
    return (await this.client.request(
      createChatItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Chat>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Chat, Query["fields"]>[]
  > {
    return await this.client.request(readChatItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Chat>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Chat, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readChatItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Chat[]>>(
    keys: string[] | number[],
    patch: Partial<Collections.Chat>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Chat, Query["fields"]>[]
  > {
    return await this.client.request(updateChatItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Chat>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class ChatItem implements TypedCollectionItemWrapper<Collections.Chat> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Chat>>(
    item: Partial<Collections.Chat>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Chat, Query["fields"]>
  > {
    return (await this.client.request(
      createChatItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Chat>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Chat, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readChatItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Chat>>(
    key: string | number,
    patch: Partial<Collections.Chat>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Chat, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateChatItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Chat>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteChatItem(key));
  }
}

/**
 * Create many chat directus users items.
 */
export function createChatDirectusUsersItems<
  const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers[]>,
>(items: Partial<Collections.ChatDirectusUsers>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "chat_directus_users", Query>(
    "chat_directus_users",
    items,
    query,
  );
}

/**
 * Create a single chat directus users item.
 */
export function createChatDirectusUsersItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.ChatDirectusUsers[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.ChatDirectusUsers>, query?: Query) {
  return DirectusSDK.createItem<Schema, "chat_directus_users", Query>(
    "chat_directus_users",
    item,
    query,
  );
}

/**
 * Read many chat directus users items.
 */
export function readChatDirectusUsersItems<
  const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "chat_directus_users", Query>(
    "chat_directus_users",
    query,
  );
}

/**
 * Read many chat directus users items.
 */
export const listChatDirectusUsers = readChatDirectusUsersItems;

/**
 * Gets a single known chat directus users item by id.
 */
export function readChatDirectusUsersItem<
  const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "chat_directus_users", Query>(
    "chat_directus_users",
    key,
    query,
  );
}

/**
 * Gets a single known chat directus users item by id.
 */
export const readChatDirectusUsers = readChatDirectusUsersItem;

/**
 * Read many chat directus users items.
 */
export function updateChatDirectusUsersItems<
  const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.ChatDirectusUsers>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "chat_directus_users", Query>(
    "chat_directus_users",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known chat directus users item by id.
 */
export function updateChatDirectusUsersItem<
  const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers[]>,
>(
  key: string | number,
  patch: Partial<Collections.ChatDirectusUsers>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "chat_directus_users", Query>(
    "chat_directus_users",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many chat directus users items.
 */
export function deleteChatDirectusUsersItems<
  const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "chat_directus_users", Query>(
    "chat_directus_users",
    keys,
  );
}

/**
 * Deletes a single known chat directus users item by id.
 */
export function deleteChatDirectusUsersItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "chat_directus_users">(
    "chat_directus_users",
    key,
  );
}

export class ChatDirectusUsersItems
  implements TypedCollectionItemsWrapper<Collections.ChatDirectusUsers>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.ChatDirectusUsers
    >,
  >(
    items: Partial<Collections.ChatDirectusUsers>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ChatDirectusUsers,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createChatDirectusUsersItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ChatDirectusUsers,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readChatDirectusUsersItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ChatDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readChatDirectusUsersItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.ChatDirectusUsers>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ChatDirectusUsers,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateChatDirectusUsersItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class ChatDirectusUsersItem
  implements TypedCollectionItemWrapper<Collections.ChatDirectusUsers>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
  >(
    item: Partial<Collections.ChatDirectusUsers>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ChatDirectusUsers,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createChatDirectusUsersItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ChatDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readChatDirectusUsersItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
  >(
    key: string | number,
    patch: Partial<Collections.ChatDirectusUsers>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ChatDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateChatDirectusUsersItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.ChatDirectusUsers>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteChatDirectusUsersItem(key));
  }
}

/**
 * Create many conversation items.
 */
export function createConversationItems<
  const Query extends Directus.Query<Schema, Collections.Conversation[]>,
>(items: Partial<Collections.Conversation>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "conversation", Query>(
    "conversation",
    items,
    query,
  );
}

/**
 * Create a single conversation item.
 */
export function createConversationItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Conversation[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Conversation>, query?: Query) {
  return DirectusSDK.createItem<Schema, "conversation", Query>(
    "conversation",
    item,
    query,
  );
}

/**
 * Read many conversation items.
 */
export function readConversationItems<
  const Query extends Directus.Query<Schema, Collections.Conversation>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "conversation", Query>(
    "conversation",
    query,
  );
}

/**
 * Read many conversation items.
 */
export const listConversation = readConversationItems;

/**
 * Gets a single known conversation item by id.
 */
export function readConversationItem<
  const Query extends Directus.Query<Schema, Collections.Conversation>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "conversation", Query>(
    "conversation",
    key,
    query,
  );
}

/**
 * Gets a single known conversation item by id.
 */
export const readConversation = readConversationItem;

/**
 * Read many conversation items.
 */
export function updateConversationItems<
  const Query extends Directus.Query<Schema, Collections.Conversation[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Conversation>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "conversation", Query>(
    "conversation",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known conversation item by id.
 */
export function updateConversationItem<
  const Query extends Directus.Query<Schema, Collections.Conversation[]>,
>(
  key: string | number,
  patch: Partial<Collections.Conversation>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "conversation", Query>(
    "conversation",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many conversation items.
 */
export function deleteConversationItems<
  const Query extends Directus.Query<Schema, Collections.Conversation[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "conversation", Query>(
    "conversation",
    keys,
  );
}

/**
 * Deletes a single known conversation item by id.
 */
export function deleteConversationItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "conversation">("conversation", key);
}

export class ConversationItems
  implements TypedCollectionItemsWrapper<Collections.Conversation>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Conversation>,
  >(
    items: Partial<Collections.Conversation>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Conversation,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createConversationItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.Conversation>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Conversation,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readConversationItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.Conversation>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Conversation,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readConversationItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Conversation[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Conversation>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Conversation,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateConversationItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Conversation>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class ConversationItem
  implements TypedCollectionItemWrapper<Collections.Conversation>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.Conversation>,
  >(
    item: Partial<Collections.Conversation>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Conversation,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createConversationItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.Conversation>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Conversation,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readConversationItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Conversation>,
  >(
    key: string | number,
    patch: Partial<Collections.Conversation>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Conversation,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateConversationItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Conversation>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteConversationItem(key));
  }
}

/**
 * Create many conversation directus users items.
 */
export function createConversationDirectusUsersItems<
  const Query extends Directus.Query<
    Schema,
    Collections.ConversationDirectusUsers[]
  >,
>(items: Partial<Collections.ConversationDirectusUsers>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "conversation_directus_users", Query>(
    "conversation_directus_users",
    items,
    query,
  );
}

/**
 * Create a single conversation directus users item.
 */
export function createConversationDirectusUsersItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.ConversationDirectusUsers[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.ConversationDirectusUsers>, query?: Query) {
  return DirectusSDK.createItem<Schema, "conversation_directus_users", Query>(
    "conversation_directus_users",
    item,
    query,
  );
}

/**
 * Read many conversation directus users items.
 */
export function readConversationDirectusUsersItems<
  const Query extends Directus.Query<
    Schema,
    Collections.ConversationDirectusUsers
  >,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "conversation_directus_users", Query>(
    "conversation_directus_users",
    query,
  );
}

/**
 * Read many conversation directus users items.
 */
export const listConversationDirectusUsers = readConversationDirectusUsersItems;

/**
 * Gets a single known conversation directus users item by id.
 */
export function readConversationDirectusUsersItem<
  const Query extends Directus.Query<
    Schema,
    Collections.ConversationDirectusUsers
  >,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "conversation_directus_users", Query>(
    "conversation_directus_users",
    key,
    query,
  );
}

/**
 * Gets a single known conversation directus users item by id.
 */
export const readConversationDirectusUsers = readConversationDirectusUsersItem;

/**
 * Read many conversation directus users items.
 */
export function updateConversationDirectusUsersItems<
  const Query extends Directus.Query<
    Schema,
    Collections.ConversationDirectusUsers[]
  >,
>(
  keys: string[] | number[],
  patch: Partial<Collections.ConversationDirectusUsers>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "conversation_directus_users", Query>(
    "conversation_directus_users",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known conversation directus users item by id.
 */
export function updateConversationDirectusUsersItem<
  const Query extends Directus.Query<
    Schema,
    Collections.ConversationDirectusUsers[]
  >,
>(
  key: string | number,
  patch: Partial<Collections.ConversationDirectusUsers>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "conversation_directus_users", Query>(
    "conversation_directus_users",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many conversation directus users items.
 */
export function deleteConversationDirectusUsersItems<
  const Query extends Directus.Query<
    Schema,
    Collections.ConversationDirectusUsers[]
  >,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "conversation_directus_users", Query>(
    "conversation_directus_users",
    keys,
  );
}

/**
 * Deletes a single known conversation directus users item by id.
 */
export function deleteConversationDirectusUsersItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "conversation_directus_users">(
    "conversation_directus_users",
    key,
  );
}

export class ConversationDirectusUsersItems
  implements TypedCollectionItemsWrapper<Collections.ConversationDirectusUsers>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.ConversationDirectusUsers
    >,
  >(
    items: Partial<Collections.ConversationDirectusUsers>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ConversationDirectusUsers,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createConversationDirectusUsersItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      Schema,
      Collections.ConversationDirectusUsers
    >,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ConversationDirectusUsers,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readConversationDirectusUsersItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<
      Schema,
      Collections.ConversationDirectusUsers
    >,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ConversationDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readConversationDirectusUsersItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.ConversationDirectusUsers[]
    >,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.ConversationDirectusUsers>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ConversationDirectusUsers,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateConversationDirectusUsersItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.ConversationDirectusUsers
    >,
  >(keys: string[] | number[]): Promise<void> {}
}

export class ConversationDirectusUsersItem
  implements TypedCollectionItemWrapper<Collections.ConversationDirectusUsers>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<
      Schema,
      Collections.ConversationDirectusUsers
    >,
  >(
    item: Partial<Collections.ConversationDirectusUsers>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ConversationDirectusUsers,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createConversationDirectusUsersItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<
      Schema,
      Collections.ConversationDirectusUsers
    >,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ConversationDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(
      readConversationDirectusUsersItem(key, query),
    );
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.ConversationDirectusUsers
    >,
  >(
    key: string | number,
    patch: Partial<Collections.ConversationDirectusUsers>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ConversationDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateConversationDirectusUsersItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.ConversationDirectusUsers
    >,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteConversationDirectusUsersItem(key));
  }
}

/**
 * The Directus Client.
 */

export type DirectusRestCommands<T extends Record<any, any>> = keyof {
  [K in keyof T as T[K] extends (
    ...any: any[]
  ) => Directus.RestCommand<any, any>
    ? K
    : never]: K;
};

export type TypedClient = {
  /**
   * Manages multiple items from the Attachment collection.
   */
  attachments: TypedCollectionItemsWrapper<Collections.Attachment>;

  /**
   * Manages individual items from the Attachment collection.
   */
  attachment: TypedCollectionItemWrapper<Collections.Attachment>;

  /**
   * Manages multiple items from the Chat collection.
   */
  chats: TypedCollectionItemsWrapper<Collections.Chat>;

  /**
   * Manages individual items from the Chat collection.
   */
  chat: TypedCollectionItemWrapper<Collections.Chat>;

  /**
   * Manages multiple items from the ChatDirectusUsers collection.
   */
  chat_directus_users: TypedCollectionItemsWrapper<Collections.ChatDirectusUsers>;

  /**
   * Manages individual items from the ChatDirectusUsers collection.
   */
  chat_directus_user: TypedCollectionItemWrapper<Collections.ChatDirectusUsers>;

  /**
   * Manages multiple items from the Conversation collection.
   */
  conversations: TypedCollectionItemsWrapper<Collections.Conversation>;

  /**
   * Manages individual items from the Conversation collection.
   */
  conversation: TypedCollectionItemWrapper<Collections.Conversation>;

  /**
   * Manages multiple items from the ConversationDirectusUsers collection.
   */
  conversation_directus_users: TypedCollectionItemsWrapper<Collections.ConversationDirectusUsers>;

  /**
   * Manages individual items from the ConversationDirectusUsers collection.
   */
  conversation_directus_user: TypedCollectionItemWrapper<Collections.ConversationDirectusUsers>;
} & DirectusCommands;

type ExcludedDirectusCommands = "withOptions" | "withToken" | "withSearch";

/**
 * This is almost a sanity check for protecting against breaking changes in the SDK.
 * If this is erroring for you, the SDK probably changed and there's an update needed.
 */

const excludedDirectusCommands: {
  [K in keyof Omit<
    DirectusSDK,
    Exclude<keyof DirectusCommands, ExcludedDirectusCommands>
  >]: true;
} = {
  ["auth"]: true,
  ["authentication"]: true,
  ["createDirectus"]: true,
  ["rest"]: true,
  ["formatFields"]: true,
  ["generateUid"]: true,
  ["getAuthEndpoint"]: true,
  ["graphql"]: true,
  ["memoryStorage"]: true,
  ["messageCallback"]: true,
  ["pong"]: true,
  ["queryToParams"]: true,
  ["realtime"]: true,
  ["sleep"]: true,
  ["staticToken"]: true,
  ["throwIfCoreCollection"]: true,
  ["throwIfEmpty"]: true,
  ["withOptions"]: true,
  ["withToken"]: true,
  ["withSearch"]: true,
} as const;

export type DirectusCommands = {
  [K in DirectusRestCommands<DirectusSDK>]: (
    ...args: Parameters<DirectusSDK[K]>
  ) => Promise<
    ReturnType<DirectusSDK[K]> extends Directus.RestCommand<infer Output, any>
      ? Output
      : unknown
  >;
};

function isDirectusRestCommand(
  pair: [any, any],
): pair is [string, (...args: any[]) => Directus.RestCommand<any, any>] {
  return (
    !((pair?.[0] as any) in excludedDirectusCommands) &&
    typeof pair?.[1] === "function"
  );
}

function isDirectusRestClient<Schema>(
  client: DirectusSDK.DirectusClient<Schema>,
): client is DirectusSDK.DirectusClient<Schema> &
  DirectusSDK.RestClient<Schema> {
  return client && "request" in client;
}

export const schema = () => {
  return <Schema,>(client: Directus.DirectusClient<Schema>): TypedClient => {
    if (!isDirectusRestClient(client)) {
      throw new Error("Directus client must have the REST plugin enabled.");
    }

    return Object.fromEntries([
      ...Object.entries(DirectusSDK)
        .filter(isDirectusRestCommand)
        .map(([key, value]) => {
          return [
            key,
            (...args: any[]): any => {
              return client.request(value(...args));
            },
          ];
        }),

      ["attachments", new AttachmentItems(client as any)],
      ["attachment", new AttachmentItem(client as any)],

      ["chats", new ChatItems(client as any)],
      ["chat", new ChatItem(client as any)],

      ["chat_directus_users", new ChatDirectusUsersItems(client as any)],
      ["chat_directus_user", new ChatDirectusUsersItem(client as any)],

      ["conversations", new ConversationItems(client as any)],
      ["conversation", new ConversationItem(client as any)],

      [
        "conversation_directus_users",
        new ConversationDirectusUsersItems(client as any),
      ],
      [
        "conversation_directus_user",
        new ConversationDirectusUsersItem(client as any),
      ],
    ]);
  };
};

export interface BindableClient {
  with: <
    Client extends DirectusSDK.DirectusClient<any>,
    Extension extends object,
  >(
    createExtension: (client: Client) => Extension,
  ) => this & Extension;
}

export const bindings = () => {
  return <Schema, Client extends DirectusSDK.DirectusClient<Schema>>(
    client: Client,
  ): BindableClient => {
    return {
      with(createExtension: any) {
        const extension = createExtension(this);
        const extensions = Object.entries(
          extension,
        ).reduce<PropertyDescriptorMap>((properties, [name, value]) => {
          return {
            ...properties,
            [name]: {
              value,
              configurable: true,
              writable: true,
              enumerable: true,
            },
          };
        }, {});

        Object.defineProperties(this, extensions);

        return this;
      },
    } as any;
  };
};

export function createDirectusWithTypes(
  url: string,
): Directus.DirectusClient<Schema> & Directus.RestClient<Schema> & TypedClient {
  return DirectusSDK.createDirectus<Schema>(url)
    .with(bindings())
    .with(DirectusSDK.rest())
    .with(schema());
}

export const createTypedClient = createDirectusWithTypes;
